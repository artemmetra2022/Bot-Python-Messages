import logging
from uuid import uuid4
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import threading
import time

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

user_messages = {}
temp_messages = {}
message_reactions = {}
user_notifications = {}

def print_status():
    while True:
        print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        time.sleep(300)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    unique_link = f"https://t.me/{context.bot.username}?start={uuid4()}"
    user_messages[user_id] = {"link": unique_link, "messages": []}
    user_notifications[user_id] = True
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{unique_link}\n\n"
        "–ü–æ–¥–µ–ª–∏—Å—å –µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üòä\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/my_messages - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º.\n"
        "/notify on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "/notify off - –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    )
    await update.message.reply_text(help_text)

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = int(context.args[0]) if context.args else None
    if user_id and user_id in user_messages:
        temp_messages[update.message.from_user.id] = {"target_user_id": user_id}
        keyboard = [
            [InlineKeyboardButton("1 —á–∞—Å", callback_data="1h")],
            [InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="2h")],
            [InlineKeyboardButton("5 —á–∞—Å–æ–≤", callback_data="5h")],
            [InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data="12h")],
            [InlineKeyboardButton("24 —á–∞—Å–∞", callback_data="24h")],
            [InlineKeyboardButton("–ë–µ—Å—Å—Ä–æ—á–Ω–æ", callback_data="forever")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –≤–∏–¥–µ.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: –¢–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤—ã–µ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã, –∞—É–¥–∏–æ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in temp_messages:
        return

    target_user_id = temp_messages[user_id]["target_user_id"]

    if update.message.text:
        message = {"type": "text", "content": update.message.text}
    elif update.message.voice:
        message = {"type": "voice", "content": update.message.voice.file_id}
    elif update.message.photo:
        message = {"type": "photo", "content": update.message.photo[-1].file_id}
    elif update.message.video:
        message = {"type": "video", "content": update.message.video.file_id}
    elif update.message.document:
        message = {"type": "document", "content": update.message.document.file_id}
    elif update.message.sticker:
        message = {"type": "sticker", "content": update.message.sticker.file_id}
    elif update.message.audio:
        message = {"type": "audio", "content": update.message.audio.file_id}
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    temp_messages[user_id]["message"] = message
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "cancel":
        del temp_messages[user_id]
        await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if user_id not in temp_messages:
        return

    target_user_id = temp_messages[user_id]["target_user_id"]
    message = temp_messages[user_id]["message"]

    if data in ["1h", "2h", "5h", "12h", "24h"]:
        hours = int(data[:-1])
        delete_time = datetime.now() + timedelta(hours=hours)
        message["delete_time"] = delete_time
        user_messages[target_user_id]["messages"].append(message)
        await query.edit_message_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å(–æ–≤).")
        if user_notifications.get(target_user_id, False):
            await context.bot.send_message(target_user_id, "üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    elif data == "forever":
        user_messages[target_user_id]["messages"].append(message)
        await query.edit_message_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ—Å—Å—Ä–æ—á–Ω–æ.")
        if user_notifications.get(target_user_id, False):
            await context.bot.send_message(target_user_id, "üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    del temp_messages[user_id]

async def my_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_messages or not user_messages[user_id]["messages"]:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    messages = user_messages[user_id]["messages"]
    for msg in messages:
        if msg["type"] == "text":
            await update.message.reply_text(f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{msg['content']}")
        elif msg["type"] == "voice":
            await update.message.reply_voice(msg["content"])
        elif msg["type"] == "photo":
            await update.message.reply_photo(msg["content"])
        elif msg["type"] == "video":
            await update.message.reply_video(msg["content"])
        elif msg["type"] == "document":
            await update.message.reply_document(msg["content"])
        elif msg["type"] == "sticker":
            await update.message.reply_sticker(msg["content"])
        elif msg["type"] == "audio":
            await update.message.reply_audio(msg["content"])

async def clear_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in user_messages:
        user_messages[user_id]["messages"] = []
        await update.message.reply_text("üóë –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in user_messages:
        count = len(user_messages[user_id]["messages"])
        await update.message.reply_text(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if args and args[0].lower() == "on":
        user_notifications[user_id] = True
        await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
    elif args and args[0].lower() == "off":
        user_notifications[user_id] = False
        await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify on –∏–ª–∏ /notify off.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}")

def main() -> None:
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    status_thread = threading.Thread(target=print_status)
    status_thread.daemon = True
    status_thread.start()

    application = Application.builder().token("7412234165:AAFDs9rgHnXpFW6hT5R0B5uyZSxaRGrELLE").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_messages", my_messages))
    application.add_handler(CommandHandler("clear", clear_messages))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("notify", notify_command))
    application.add_handler(CommandHandler("start", handle_link))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(filters.VIDEO, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_message))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_message))
    application.add_handler(MessageHandler(filters.AUDIO, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == '__main__':
    main()